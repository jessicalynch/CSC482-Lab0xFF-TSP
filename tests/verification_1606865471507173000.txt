************ TESTING CIRCULAR EUCLIDEAN COST MATRICES ************

Testing 4x4 matrix...

   0.0 1414.2 1414.2 2000.0 
1414.2    0.0 2000.0 1414.2 
1414.2 2000.0    0.0 1414.2 
2000.0 1414.2 1414.2    0.0 

Brute Iterative: 	[0, 1, 3, 2, 0] 	Cost: 5656.8542494923795
Brute Recursive: 	[0, 2, 3, 1, 0] 	Cost: 5656.8542494923795
Dynamic Programming: 	[0, 2, 3, 1, 0] 	Cost: 5656.8542494923795

Testing 5x5 matrix...

   0.0 1175.6 1902.1 1902.1 1175.6 
1175.6    0.0 1175.6 1902.1 1902.1 
1902.1 1175.6    0.0 1175.6 1902.1 
1902.1 1902.1 1175.6    0.0 1175.6 
1175.6 1902.1 1902.1 1175.6    0.0 

Brute Iterative: 	[0, 1, 2, 3, 4, 0] 	Cost: 5877.852522924732
Brute Recursive: 	[0, 1, 2, 3, 4, 0] 	Cost: 5877.852522924732
Dynamic Programming: 	[0, 1, 2, 3, 4, 0] 	Cost: 5877.852522924732

Testing 6x6 matrix...

   0.0 1732.1 1000.0 1732.1 2000.0 1000.0 
1732.1    0.0 1000.0 1732.1 1000.0 2000.0 
1000.0 1000.0    0.0 2000.0 1732.1 1732.1 
1732.1 1732.1 2000.0    0.0 1000.0 1000.0 
2000.0 1000.0 1732.1 1000.0    0.0 1732.1 
1000.0 2000.0 1732.1 1000.0 1732.1    0.0 

Brute Iterative: 	[0, 2, 1, 4, 3, 5, 0] 	Cost: 6000.0
Brute Recursive: 	[0, 2, 1, 4, 3, 5, 0] 	Cost: 6000.0
Dynamic Programming: 	[0, 2, 1, 4, 3, 5, 0] 	Cost: 6000.0

Testing 7x7 matrix...

   0.0  867.8 1563.7 1949.9 1949.9 1563.7  867.8 
 867.8    0.0  867.8 1563.7 1949.9 1949.9 1563.7 
1563.7  867.8    0.0  867.8 1563.7 1949.9 1949.9 
1949.9 1563.7  867.8    0.0  867.8 1563.7 1949.9 
1949.9 1949.9 1563.7  867.8    0.0  867.8 1563.7 
1563.7 1949.9 1949.9 1563.7  867.8    0.0  867.8 
 867.8 1563.7 1949.9 1949.9 1563.7  867.8    0.0 

Brute Iterative: 	[0, 1, 2, 3, 4, 5, 6, 0] 	Cost: 6074.372347645813
Brute Recursive: 	[0, 6, 5, 4, 3, 2, 1, 0] 	Cost: 6074.372347645813
Dynamic Programming: 	[0, 6, 5, 4, 3, 2, 1, 0] 	Cost: 6074.372347645813

Testing 8x8 matrix...

   0.0  765.4 1847.8  765.4 1414.2 1414.2 1847.8 2000.0 
 765.4    0.0 2000.0 1414.2 1847.8  765.4 1414.2 1847.8 
1847.8 2000.0    0.0 1414.2  765.4 1847.8 1414.2  765.4 
 765.4 1414.2 1414.2    0.0  765.4 1847.8 2000.0 1847.8 
1414.2 1847.8  765.4  765.4    0.0 2000.0 1847.8 1414.2 
1414.2  765.4 1847.8 1847.8 2000.0    0.0  765.4 1414.2 
1847.8 1414.2 1414.2 2000.0 1847.8  765.4    0.0  765.4 
2000.0 1847.8  765.4 1847.8 1414.2 1414.2  765.4    0.0 

Brute Iterative: 	[0, 3, 4, 2, 7, 6, 5, 1, 0] 	Cost: 6122.934917841436
Brute Recursive: 	[0, 1, 5, 6, 7, 2, 4, 3, 0] 	Cost: 6122.934917841436
Dynamic Programming: 	[0, 1, 5, 6, 7, 2, 4, 3, 0] 	Cost: 6122.934917841436

Testing 9x9 matrix...

   0.0 1969.6 1732.1 1285.6  684.0 1969.6 1732.1  684.0 1285.6 
1969.6    0.0  684.0 1285.6 1732.1  684.0 1285.6 1969.6 1732.1 
1732.1  684.0    0.0  684.0 1285.6 1285.6 1732.1 1969.6 1969.6 
1285.6 1285.6  684.0    0.0  684.0 1732.1 1969.6 1732.1 1969.6 
 684.0 1732.1 1285.6  684.0    0.0 1969.6 1969.6 1285.6 1732.1 
1969.6  684.0 1285.6 1732.1 1969.6    0.0  684.0 1732.1 1285.6 
1732.1 1285.6 1732.1 1969.6 1969.6  684.0    0.0 1285.6  684.0 
 684.0 1969.6 1969.6 1732.1 1285.6 1732.1 1285.6    0.0  684.0 
1285.6 1732.1 1969.6 1969.6 1732.1 1285.6  684.0  684.0    0.0 

Brute Iterative: 	[0, 4, 3, 2, 1, 5, 6, 8, 7, 0] 	Cost: 6156.362579862038
Brute Recursive: 	[0, 4, 3, 2, 1, 5, 6, 8, 7, 0] 	Cost: 6156.362579862038
Dynamic Programming: 	[0, 4, 3, 2, 1, 5, 6, 8, 7, 0] 	Cost: 6156.362579862038

************ TESTING RANDOM COST MATRICES ************

Testing 4x4 matrix...

000 737 233 145 
737 000 751 485 
233 751 000 871 
145 485 871 000 

Brute Iterative: 	[0, 2, 1, 3, 0] 	Cost: 1614
Brute Recursive: 	[0, 2, 1, 3, 0] 	Cost: 1614
Dynamic Programming: 	[0, 2, 1, 3, 0] 	Cost: 1614

Testing 5x5 matrix...

000 097 713 770 288 
097 000 470 527 524 
713 470 000 767 036 
770 527 767 000 719 
288 524 036 719 000 

Brute Iterative: 	[0, 1, 3, 2, 4, 0] 	Cost: 1715
Brute Recursive: 	[0, 1, 3, 2, 4, 0] 	Cost: 1715
Dynamic Programming: 	[0, 1, 3, 2, 4, 0] 	Cost: 1715

Testing 6x6 matrix...

000 761 146 046 530 401 
761 000 536 517 057 253 
146 536 000 981 136 137 
046 517 981 000 606 714 
530 057 136 606 000 641 
401 253 137 714 641 000 

Brute Iterative: 	[0, 2, 5, 1, 4, 3, 0] 	Cost: 1245
Brute Recursive: 	[0, 2, 5, 1, 4, 3, 0] 	Cost: 1245
Dynamic Programming: 	[0, 2, 5, 1, 4, 3, 0] 	Cost: 1245

Testing 7x7 matrix...

000 642 363 663 194 674 343 
642 000 091 136 761 845 320 
363 091 000 168 160 315 687 
663 136 168 000 435 129 774 
194 761 160 435 000 441 143 
674 845 315 129 441 000 763 
343 320 687 774 143 763 000 

Brute Iterative: 	[0, 4, 2, 5, 3, 1, 6, 0] 	Cost: 1597
Brute Recursive: 	[0, 4, 2, 5, 3, 1, 6, 0] 	Cost: 1597
Dynamic Programming: 	[0, 4, 2, 5, 3, 1, 6, 0] 	Cost: 1597

Testing 8x8 matrix...

000 321 676 779 546 068 482 569 
321 000 482 802 931 177 182 909 
676 482 000 479 476 397 631 557 
779 802 479 000 471 392 889 885 
546 931 476 471 000 543 603 238 
068 177 397 392 543 000 812 410 
482 182 631 889 603 812 000 976 
569 909 557 885 238 410 976 000 

Brute Iterative: 	[0, 1, 6, 2, 3, 4, 7, 5, 0] 	Cost: 2800
Brute Recursive: 	[0, 1, 6, 2, 3, 4, 7, 5, 0] 	Cost: 2800
Dynamic Programming: 	[0, 1, 6, 2, 3, 4, 7, 5, 0] 	Cost: 2800

Testing 9x9 matrix...

000 438 357 011 620 702 502 620 870 
438 000 609 187 794 875 111 704 262 
357 609 000 226 090 552 870 893 896 
011 187 226 000 048 981 623 379 360 
620 794 090 048 000 350 709 233 576 
702 875 552 981 350 000 817 287 703 
502 111 870 623 709 817 000 161 037 
620 704 893 379 233 287 161 000 724 
870 262 896 360 576 703 037 724 000 

Brute Iterative: 	[0, 2, 4, 5, 7, 6, 8, 1, 3, 0] 	Cost: 1742
Brute Recursive: 	[0, 2, 4, 5, 7, 6, 8, 1, 3, 0] 	Cost: 1742
Dynamic Programming: 	[0, 2, 4, 5, 7, 6, 8, 1, 3, 0] 	Cost: 1742

Verified: True
