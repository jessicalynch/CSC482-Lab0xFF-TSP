************ TESTING CIRCULAR EUCLIDEAN COST MATRICES ************

Testing 4x4 matrix...

   0.0 1414.2 2000.0 1414.2 
1414.2    0.0 1414.2 2000.0 
2000.0 1414.2    0.0 1414.2 
1414.2 2000.0 1414.2    0.0 

Brute Iterative: 	[0, 1, 2, 3, 0] 	Cost: 5656.8542494923795
Brute Recursive: 	[0, 3, 2, 1, 0] 	Cost: 5656.8542494923795
Dynamic Programming: 	[0, 3, 2, 1, 0] 	Cost: 5656.8542494923795

Testing 5x5 matrix...

   0.0 1175.6 1175.6 1902.1 1902.1 
1175.6    0.0 1902.1 1175.6 1902.1 
1175.6 1902.1    0.0 1902.1 1175.6 
1902.1 1175.6 1902.1    0.0 1175.6 
1902.1 1902.1 1175.6 1175.6    0.0 

Brute Iterative: 	[0, 1, 3, 4, 2, 0] 	Cost: 5877.852522924731
Brute Recursive: 	[0, 2, 4, 3, 1, 0] 	Cost: 5877.852522924731
Dynamic Programming: 	[0, 2, 4, 3, 1, 0] 	Cost: 5877.852522924731

Testing 6x6 matrix...

   0.0 1000.0 1000.0 2000.0 1732.1 1732.1 
1000.0    0.0 1732.1 1732.1 1000.0 2000.0 
1000.0 1732.1    0.0 1732.1 2000.0 1000.0 
2000.0 1732.1 1732.1    0.0 1000.0 1000.0 
1732.1 1000.0 2000.0 1000.0    0.0 1732.1 
1732.1 2000.0 1000.0 1000.0 1732.1    0.0 

Brute Iterative: 	[0, 2, 5, 3, 4, 1, 0] 	Cost: 6000.0
Brute Recursive: 	[0, 1, 4, 3, 5, 2, 0] 	Cost: 6000.0
Dynamic Programming: 	[0, 1, 4, 3, 5, 2, 0] 	Cost: 6000.0

Testing 7x7 matrix...

   0.0  867.8 1563.7 1949.9  867.8 1949.9 1563.7 
 867.8    0.0 1949.9 1949.9 1563.7 1563.7  867.8 
1563.7 1949.9    0.0  867.8  867.8 1563.7 1949.9 
1949.9 1949.9  867.8    0.0 1563.7  867.8 1563.7 
 867.8 1563.7  867.8 1563.7    0.0 1949.9 1949.9 
1949.9 1563.7 1563.7  867.8 1949.9    0.0  867.8 
1563.7  867.8 1949.9 1563.7 1949.9  867.8    0.0 

Brute Iterative: 	[0, 1, 6, 5, 3, 2, 4, 0] 	Cost: 6074.372347645813
Brute Recursive: 	[0, 4, 2, 3, 5, 6, 1, 0] 	Cost: 6074.372347645813
Dynamic Programming: 	[0, 4, 2, 3, 5, 6, 1, 0] 	Cost: 6074.372347645813

Testing 8x8 matrix...

   0.0  765.4 1414.2  765.4 2000.0 1847.8 1847.8 1414.2 
 765.4    0.0 1847.8 1414.2 1847.8 2000.0 1414.2  765.4 
1414.2 1847.8    0.0  765.4 1414.2  765.4 1847.8 2000.0 
 765.4 1414.2  765.4    0.0 1847.8 1414.2 2000.0 1847.8 
2000.0 1847.8 1414.2 1847.8    0.0  765.4  765.4 1414.2 
1847.8 2000.0  765.4 1414.2  765.4    0.0 1414.2 1847.8 
1847.8 1414.2 1847.8 2000.0  765.4 1414.2    0.0  765.4 
1414.2  765.4 2000.0 1847.8 1414.2 1847.8  765.4    0.0 

Brute Iterative: 	[0, 1, 7, 6, 4, 5, 2, 3, 0] 	Cost: 6122.934917841436
Brute Recursive: 	[0, 3, 2, 5, 4, 6, 7, 1, 0] 	Cost: 6122.934917841436
Dynamic Programming: 	[0, 3, 2, 5, 4, 6, 7, 1, 0] 	Cost: 6122.934917841436

Testing 9x9 matrix...

   0.0 1285.6 1969.6  684.0 1969.6 1732.1  684.0 1732.1 1285.6 
1285.6    0.0 1285.6 1732.1 1732.1  684.0  684.0 1969.6 1969.6 
1969.6 1285.6    0.0 1969.6  684.0  684.0 1732.1 1285.6 1732.1 
 684.0 1732.1 1969.6    0.0 1732.1 1969.6 1285.6 1285.6  684.0 
1969.6 1732.1  684.0 1732.1    0.0 1285.6 1969.6  684.0 1285.6 
1732.1  684.0  684.0 1969.6 1285.6    0.0 1285.6 1732.1 1969.6 
 684.0  684.0 1732.1 1285.6 1969.6 1285.6    0.0 1969.6 1732.1 
1732.1 1969.6 1285.6 1285.6  684.0 1732.1 1969.6    0.0  684.0 
1285.6 1969.6 1732.1  684.0 1285.6 1969.6 1732.1  684.0    0.0 

Brute Iterative: 	[0, 3, 8, 7, 4, 2, 5, 1, 6, 0] 	Cost: 6156.362579862037
Brute Recursive: 	[0, 6, 1, 5, 2, 4, 7, 8, 3, 0] 	Cost: 6156.362579862037
Dynamic Programming: 	[0, 6, 1, 5, 2, 4, 7, 8, 3, 0] 	Cost: 6156.362579862037

************ TESTING RANDOM COST MATRICES ************

Testing 4x4 matrix...

0000 0432 0985 1000 
0432 0000 0354 0414 
0985 0354 0000 0536 
1000 0414 0536 0000 

Brute Iterative: 	[0, 1, 2, 3, 0] 	Cost: 2322
Brute Recursive: 	[0, 1, 2, 3, 0] 	Cost: 2322
Dynamic Programming: 	[0, 1, 2, 3, 0] 	Cost: 2322

Testing 5x5 matrix...

000 867 750 261 665 
867 000 818 670 604 
750 818 000 986 892 
261 670 986 000 620 
665 604 892 620 000 

Brute Iterative: 	[0, 2, 1, 4, 3, 0] 	Cost: 3053
Brute Recursive: 	[0, 2, 1, 4, 3, 0] 	Cost: 3053
Dynamic Programming: 	[0, 2, 1, 4, 3, 0] 	Cost: 3053

Testing 6x6 matrix...

000 173 583 459 880 032 
173 000 393 653 035 586 
583 393 000 905 110 570 
459 653 905 000 823 601 
880 035 110 823 000 364 
032 586 570 601 364 000 

Brute Iterative: 	[0, 1, 4, 2, 3, 5, 0] 	Cost: 1856
Brute Recursive: 	[0, 1, 4, 2, 3, 5, 0] 	Cost: 1856
Dynamic Programming: 	[0, 1, 4, 2, 3, 5, 0] 	Cost: 1856

Testing 7x7 matrix...

000 468 678 230 091 985 377 
468 000 449 515 827 073 219 
678 449 000 912 110 729 697 
230 515 912 000 545 573 872 
091 827 110 545 000 678 296 
985 073 729 573 678 000 249 
377 219 697 872 296 249 000 

Brute Iterative: 	[0, 3, 5, 6, 1, 2, 4, 0] 	Cost: 1921
Brute Recursive: 	[0, 3, 5, 6, 1, 2, 4, 0] 	Cost: 1921
Dynamic Programming: 	[0, 3, 5, 6, 1, 2, 4, 0] 	Cost: 1921

Testing 8x8 matrix...

000 469 273 138 512 832 668 147 
469 000 822 451 680 838 872 061 
273 822 000 509 559 763 415 855 
138 451 509 000 465 242 703 265 
512 680 559 465 000 269 070 298 
832 838 763 242 269 000 375 463 
668 872 415 703 070 375 000 509 
147 061 855 265 298 463 509 000 

Brute Iterative: 	[0, 2, 6, 4, 5, 3, 1, 7, 0] 	Cost: 1928
Brute Recursive: 	[0, 2, 6, 4, 5, 3, 1, 7, 0] 	Cost: 1928
Dynamic Programming: 	[0, 2, 6, 4, 5, 3, 1, 7, 0] 	Cost: 1928

Testing 9x9 matrix...

000 328 351 168 778 082 231 646 645 
328 000 699 096 768 330 456 533 087 
351 699 000 604 956 938 699 578 734 
168 096 604 000 569 930 131 318 902 
778 768 956 569 000 328 389 860 022 
082 330 938 930 328 000 291 837 414 
231 456 699 131 389 291 000 349 119 
646 533 578 318 860 837 349 000 381 
645 087 734 902 022 414 119 381 000 

Brute Iterative: 	[0, 2, 7, 6, 3, 1, 8, 4, 5, 0] 	Cost: 2024
Brute Recursive: 	[0, 2, 7, 6, 3, 1, 8, 4, 5, 0] 	Cost: 2024
Dynamic Programming: 	[0, 2, 7, 6, 3, 1, 8, 4, 5, 0] 	Cost: 2024

Verified: True
